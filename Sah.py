#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#```````0```````1```````2```````3```````4```````5```````6```````
#=======0=======1=======2=======3=======4=======5=======6>>>>>>>
#------------------------------------------------------- modules
import numpy as np # NumPy is the fundamental package for scient
import matplotlib.pyplot as plt # matplotlib.pyplot is a state-b
#_______0_______1_______2_______3_______4_______5_______6_______
class Poly: #---Polyhedron-------------------------------------0
    def __init__(self, face): #-Constructor--------------------1
        self.face   = face #----List-Of-Order-Hoods------------2
        self.nearz  = [len(j) for j in face] #--Hood-Sizes-----3
        self.nombre = len(face) - 1 #---Number-Of-Faces--------4
#,,,,,,,0,,,,,,,1,,,,,,,2,,,,,,,3,,,,,,,4,,,,,,,5,,,,,,,6,,,,,,,
class Stack(list): psh = list.append ## push ###################
#================================================== global stuff
Cube = Poly([[], #---------------------------------------------0
             [1,5,4,3,2], #----***--* *--***--***--------------1
             [2,6,5,4,1], #----*  --* *--* *--*  --------------2
             [3,6,5,4,1], #----*  --* *--***--***--------------3
             [4,6,3,2,1], #----*  --* *--* *--*  --------------4
             [5,6,3,2,1], #----***--***--***--***--------------5
             [6,5,4,3,2]]) #-----------------------------------6
Hepta = Poly([[], #--------------------------------------------7
              [1,7,6,5,4,3], #--------***********--------------8
              [2,7,5,4,3], #-------------------*---------------9
              [3,7,5,2,1], #------------------*----------------a
              [4,7,6,5,2,1], #---------------*-----------------b
              [5,6,4,3,2,1], #--------------*------------------c
              [6,5,4,1], #-----------------*-------------------d
              [7,4,3,2,1]]) #-------------*--------------------e
Octa = Poly([[], #---------------------------------------------f
             [1,8,7,6,5,4,3], #------------,,,,,,,-------------0
             [2,8,7,6,5,4,3], #------------,oo.. ,-------------1
             [3,8,7,6,5,2,1], #------------,.. oo,-------------2
             [4,8,7,6,5,2,1], #------------,,,,,,,-------------3
             [5,8,7,4,3,2,1], #------------,xo ..,-------------4
             [6,8,7,4,3,2,1], #------------,oo ··,-------------5
             [7,6,5,4,3,2,1], #------------,,,,,,,-------------6
             [8,6,5,4,3,2,1]]) #-------------------------------7
Ennea = Poly([[], # some Church has the same top (Wikipedia) --8
              [1,9,8,7,6,4,3,2], #-----------------------------9
              [2,8,7,6,5,4,3,1], #-----------------------------a
              [3,9,7,5,4,2,1], #-------------------------------b
              [4,9,7,5,3,2,1], #-------------------------------c
              [5,9,8,7,6,4,3,2], #-----------------------------d
              [6,9,8,7,5,2,1], #-------------------------------e
              [7,8,6,5,4,3,2,1], #-----------------------------f
              [8,9,7,6,5,2,1], #-------------------------------0
              [9,8,6,5,4,3,1]]) #------------------------------1
Sah = Poly([[], #----------------------------------------------2
            [ 1,20,15,14, 9, 8, 7, 4, 3, 2], #-----------------3
            [ 2,20,15,14,13,12, 9, 4, 3, 1], #-----------------4
            [ 3,20,13,11, 7, 6, 5, 4, 2, 1], #-----------------5
            [ 4,20,14,13,12,11, 5, 3, 2, 1], #-----------------6
            [ 5,20,18,13,11,10, 7, 6, 4, 3], #-----------------7
            [ 6,20,18,17,11,10, 8, 7, 5, 3], #-----------------8
            [ 7,20,18,17, 9, 8, 6, 5, 3, 1], #-----------------9
            [ 8,20,18,17,16,15, 9, 7, 6, 1], #-----------------0
            [ 9,20,17,16,15,14, 8, 7, 2, 1], #-----------------a
            [10,19,18,17,16,13,12,11, 6, 5], #-----------------b
            [11,19,18,13,12,10, 6, 5, 4, 3], #-----------------c
            [12,19,16,15,14,13,11,10, 4, 2], #-----------------d
            [13,19,14,12,11,10, 5, 4, 3, 2], #-----------------e
            [14,19,16,15,13,12, 9, 4, 2, 1], #-----------------f
            [15,19,17,16,14,12, 9, 8, 2, 1], #-----------------0
            [16,19,18,17,15,14,12,10, 9, 8], #-----------------1
            [17,19,18,16,15,10, 9, 8, 7, 6], #-----------------2
            [18,19,17,16,11,10, 8, 7, 6, 5], #-----------------3
            [19,18,17,16,15,14,13,12,11,10], #-----------------4
            [20, 9, 8, 7, 6, 5, 4, 3, 2, 1]]) #----------------5
Sah2 = Poly([[], #---------------------------------------------6
             [ 1,20, 9, 2], #----------------------------------7
             [ 2,14, 4, 1], #----------------------------------8
             [ 3,20, 5, 4], #----------------------------------9
             [ 4,13, 3, 2], #----------------------------------a
             [ 5,11, 6, 3], #----------------------------------b
             [ 6,18, 7, 5], #----------------------------------c
             [ 7,20, 8, 6], #----------------------------------d
             [ 8,17, 9, 7], #----------------------------------e
             [ 9,15, 8, 1], #----------------------------------f
             [10,19,18,11], #----------------------------------0
             [11,13,10, 5], #----------------------------------1
             [12,19,14,13], #----------------------------------2
             [13,12,11, 4], #----------------------------------3
             [14,15,12, 2], #----------------------------------4
             [15,16,14, 9], #----------------------------------5
             [16,19,17,15], #----------------------------------6
             [17,18,16, 8], #----------------------------------7
             [18,17,10, 6], #----------------------------------8
             [19,16,12,10], #----------------------------------9
             [20, 7, 3, 1]]) #---------------------------------a
stk = Stack() #----------->>----------------------------shtack-b
route = Stack() #-------------->>-----------list-of-all-routes-c
poly = Sah #----->>----------------------------------shortcuts-d
face = poly.face #------------------>>-------------------------e
nearz = poly.nearz #----------------------------------->>------f
nombre = poly.nombre #--->>------------------------------------0
################################################################
#|G|E|T| |T|H|E| |C|O|S|T| |O|F| |P|E|R|M|U|T|A|T|I|O|N| |B| | |
def Cost(b): ###################################################
    a = np.arange(1, len(b) + 1) # [1, 2, ... len(b)] ##########
    return np.inner(a, b) ######################################
################################################################
#| | | | | | | | | | | | | | | | | | | | | | |Ó| | | | | | | | |
#| | | | | | | | | | | | | | | | | | | | | |:| | | | | |.|.|.| |
#| | | | | | | | |.|.|.| | | | | | | |.| | | | | | | | | | | | |
#| | | | | | | | |!| | | | | | | | | | | | | | | | | | | | | | |
def inorder(fn): # recursive walk, fn - face nombre ========== #
    stk.psh(fn) # push face namba to stack =================== #
    for j in range(1, nearz[fn]): # loop over near faces ===== #
        fn1 = face[fn][j] # j-th neighbor ## ## ## ## ## ===== #
        if fn1 not in stk: # ck if visited ############# ===== #
            inorder(fn1) # walk fn prime  ## ## ## ## ## ===== #
    if len(stk) == nombre: # all faces are routed ###### ='`', #
        route.psh(stk[:]) # Copy Ninja Kakashi  ## ## ## k   - #
    stk.pop() # next gate ###### ####### ####### ####### =='== #
################################################################
#| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
def dump_routes(n = None): # | | | | | | | | | | | | | | | | | |
    if n is None: n = len(route) # | | | | | | | | | | | | | | |
    for j in range(n): # | | | | | | | | | | | | | | | | | | | |
        b = route[j] # | | | | | | | | | | | | | | | | | | | | |
        print(b, Cost(b)) #| | | | | | | | | | | | | | | | | | |
################################################################
#|P|L|O|T| |C|O|S|T| |V|S| |R|O|U|T|E| | | | | | | | | | | | | |
def cost_vs_route(): ##_########################################
    fig, ax = plt.subplots() # figure and axes ##¡           ###
    for fn in range(1, nombre + 1): # loop over faces #¤     ###
        route.clear() ##########################################
        inorder(fn) # oufut: route #####=======##±===========###
        y = [Cost(b) for b in route] ###=======##-===========###
        x = np.arange(1, len(y) + 1) ###=======##·===========###
        ax.plot(x, y, label = str(fn)) #=======##«===========###
    ax.grid() ##################################################
    ax.legend() #########¯¯¯¯¯¯¯¯¯¯#####¯¯¯¯¯¯¯##¯¯¯¯¯¯¯¯¯¯¯¯###
    plt.xlabel('route') #   »      #####       ##‘©‘‘‘‘‘‘‘‘‘‘###
    plt.ylabel('Cost') ##          #####¿      ## n     £   ¶###
    plt.show() #################################################
################################################################
#|C|K| |S|T|K| |I|F| |T|H|E| |I|N|F|U|T| |F|A|C|E| |N|U|M|B|E|R|
#|H|A|S| |A|L|R|E|A|D|Y| |B|E|E|N| |V|I|S|I|T|E|D| | | | | | | |
def ckstk(fn1): # check check ##################################
    for fn, ni in stk: #                                       #
        if face[fn][ni] == fn1: return True #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯#
    return False #                           oo      ..   °°  
################################################################
#| | | | | | | | | | | | | | | | | | | | | | | | | |||||||
def ordeeer(fn): # fn - face nombre, stk should be empty here ##
    # [0. INIT] ################################################
    stk.psh((fn, 0)) # initial face number                  ® ##
    ni = 1 ########### near index                           § ##
    stklen = 1 ####### stack length       oo   ==           ¥ ##
    while True: ###############################==############### 
        # [1. NEAR] ###########################==###############
        fn1 = face[fn][ni] # fn prime      oo  ==           ‘ ##
        # [2. CK] ########################################_#####
        if not ckstk(fn1): # not visited                 _  ¢ ##
            # [3. RECORD] ##############################_#######
            stk.psh((fn, ni)) # yæ!»db«    »db«    »db«_    µ ##
            stklen += 1 # ha-ha         § &           _   ..¦ ##
            # [4. DONE?] #############################_#########
            if stklen == nombre: break # ve are don!   _    ≈ ##
            # [5. CLCKNXT] #############################_#######
            fn, ni = fn1, 1 # ·· ..                      _  № ##
            continue # jump to [1. NEAR] #################_#####
        while True: #######################################_####
            # [6. NXTGATE] ####_####_####_####_####_####_###_###
            ni += 1 #         ‘'`  ‘'`  ‘'` ==    ‘'`  ‘'`   _
            # [7. SUCKS] #__________________==µ°_______________
            if ni != nearz[fn]: break # jump to [1] ###########_
            # [8. POP] ########################################_
            fn, ni = stk.pop() #===============================_
            stklen -= 1 #--------------------------------------_
#.......0.......1.......2.......3.......4.......5.......6.......
def Sah(): #= = = = = = = = = = = = = =m=a=i=n= =f=u=n=c=t=i=o=n
    for fn in range(1, nombre + 1):
        ordeeer(fn)
        path = [face[fn][ni] for fn, ni in stk]
        print(path, Cost(path))
        stk.clear()
#:::::::0:::::::1:::::::2:::::::3:::::::4:::::::5:::::::6:::::::    
if __name__ == '__main__': Sah() ########################## log:
